#!/usr/bin/perl

use Cwd;
use File::Spec;
use File::Path qw/make_path/;
use File::Find;
use IPC::System::Simple;
use File::Copy;

#quack
#requires vorbis-tools, flac debian packages, "file" command (standard?)

# IMPORTANT: it REQUIRES the original files to be somewhere under a directory called _originalQ (with this exact spelling)
# 
# e.g. /home/myUser/mahMusique/_originalQ/mahFevritArtist/OMGMAHFEVRITALBVM/mahTrack01.flac
#
# it will then transcode the file to 3 different ogg qualities, duplicating the directory structure
#
# i.e. /home/myUser/mahMusique/_q00/mahFevritArtist/OMGMAHFEVRITALBVM/mahTrack01.ogg
#      /home/myUser/mahMusique/_q05/mahFevritArtist/OMGMAHFEVRITALBVM/mahTrack01.ogg
#      /home/myUser/mahMusique/_q10/mahFevritArtist/OMGMAHFEVRITALBVM/mahTrack01.ogg
#
# (The script generates all the necessary subdirectories)
#
#

## general variables
$encoderFLAC = "oggenc";
$encoderMyDir2Ogg = "mydir2ogg";

if (scalar @ARGV > 0)
{
    if ($ARGV[0] eq '--hydra')
    {
	$howMany = $ARGV[1];
	$fromArg = $ARGV2;
	$heilHydra = true;
	
    } else
    {
    	$fromArg = $ARGV[0];
    }
} else
{
    $fromArg = '.';
}

if (!$heilHydra)
{

#First of all, what is the argument that was supplied to quack?

$type = `file -b \"$fromArg\"`;

if (index($type, "directory") != -1)
    {
	# seek inside directory recursively.
	printf "executing find\n";
	find({wanted => \&Test, no_chdir => 1}, $fromArg);
	
    } elsif (index($type, "FLAC") != -1)
    {
	# printf "Found FLAC file $_\n";
        printf "Doing transcoding on single file";
	&MakeQualityDirs($fromArg);
	&DoFLACTranscoding($fromArg);
    } elsif ((index($type, "ID3") != -1) || (index($type, "M4A") != -1))
{
	# printf "Found MP3 file $_\n";
        printf "Doing transcoding on single file";
	&MakeQualityDirs($fromArg);
	&DoMyDir2OggTranscoding($fromArg);
    	
}
} else
{
  print "******\nHeil Hydra!\n******\n\n\n";

	for ($i = 0; $i < $howMany; $i++)
	{
		system ("quack $fromArg&");
	}
  # end of program in hydra mode.
}




sub Test
{
    #printf "before TEST $_";
    my $type = `file -b \"$_\"`;

    if (index($type, "FLAC") != -1)
    {
	# printf "Found FLAC file $_\n";
	&MakeQualityDirs($_);
	&DoFLACTranscoding($_);
    } elsif ((index($type, "ID3") != -1) || (index($type, "M4A") != -1))
    {
	# printf "Found MP3 file $_\n";
	&MakeQualityDirs($_);
	&DoMyDir2OggTranscoding($_);
    } elsif(index($type, "JPEG") != -1)
    {
        # copy the picture file to target folder?
	#copy("$_, 
        &MakeQualityDirs($_);
        &DistributePic($_);
    } else
    {
	printf "Rejected $_\n";
    }
    #printf "After TEST"
}

sub DoFLACTranscoding # $_[0] : file to be transcoded.
{
    $wholeFilePath = File::Spec->rel2abs($_[0]);

    ($volume,$directories,$file) = File::Spec->splitpath( $wholeFilePath );

    #printf "wholepath: $wholeFilePath; Dirs: $directories; File: $file\n";

    $musicRootLocation = index($wholeFilePath, '_originalQ');

    if ($musicRootLocation != -1)
    {
	
	$musicRoot = substr $cwd, 0, $musicRootLocation;
	
	
	#printf "musicRoot: $musicRoot\n";
	
	$pathQ00 = $wholeFilePath;

	$pathQ00 =~ s/_originalQ/_q00/;

	$pathQ05 = $wholeFilePath;

	$pathQ05 =~ s/_originalQ/_q05/;

	$pathQ10 = $wholeFilePath;

	$pathQ10 =~ s/_originalQ/_q10/;
	

	#printf "UserStructure: $pathQ0";

	#@pathDirs = split( /\//, $cwd);

	#$lastDir = $pathDirs[(scalar @pathDirs)-1];

	#printf("Lastdir: $lastDir");

	$type = `file -b \"$_[0]\"`;

	#printf "Filetype is $type";

	if (index($type, "FLAC") != -1)
	{
	    #printf("isFLAC :D");

	    $pathQ00 =~ s/\.flac$/\.ogg/;

	    ($volume,$newPath,$newFile) = File::Spec->splitpath( $pathQ00 );


	    @encoderArgs = ("-q","0","-o", $pathQ00, $_[0]);

	   if (-s $pathQ00 <= 1)
	   {

	        system ($encoderFLAC, @encoderArgs);
	   } else 
	   {
		printf("File exists and has been skipped: $pathQ00\n");
	   }
	    ####

	    $pathQ05 =~ s/\.flac$/\.ogg/;

	    ($volume,$newPath,$newFile) = File::Spec->splitpath( $pathQ05 );

	    @encoderArgs = ("-q","5","-o", $pathQ05, $_[0]);
	    
	   if (-s $pathQ05 <= 1)
	   {

	        system ($encoderFLAC, @encoderArgs);
	   } else 
	   {
		printf("File exists and has been skipped: $pathQ05\n");
	   }

	    

	    ####

	    $pathQ10 =~ s/\.flac$/\.ogg/;

	    ($volume,$newPath,$newFile) = File::Spec->splitpath( $pathQ10 );


	    @encoderArgs = ("-q","10","-o", $pathQ10, $_[0]);
	    
	   if (-s $pathQ10 <= 1)
	   {
	    	
	        system ($encoderFLAC, @encoderArgs);
	   } else 
	   {
		printf("File exists and has been skipped: $pathQ10\n");
	   }

	    

	} else
	{
	    printf("isNotFLAC D:");
	}
    } else
    {
	printf "Error: quack cannot determine music root location (aka \"_originalQ\" )\n";
    }
}

sub DoMyDir2OggTranscoding # $_[0] : file to be transcoded.
{
    $wholeFilePath = File::Spec->rel2abs($_[0]);

    ($volume,$directories,$file) = File::Spec->splitpath( $wholeFilePath );

    #printf "wholepath: $wholeFilePath; Dirs: $directories; File: $file\n";

    $musicRootLocation = index($wholeFilePath, '_originalQ');

    if ($musicRootLocation != -1)
    {
	
	$musicRoot = substr $cwd, 0, $musicRootLocation;
	
	
	#printf "musicRoot: $musicRoot\n";
	
	$pathQ00 = $wholeFilePath;

	$pathQ00 =~ s/_originalQ/_q00/;

	$pathQ05 = $wholeFilePath;

	$pathQ05 =~ s/_originalQ/_q05/;

	$pathQ10 = $wholeFilePath;

	$pathQ10 =~ s/_originalQ/_q10/;
	

	#printf "UserStructure: $pathQ0";

	#@pathDirs = split( /\//, $cwd);

	#$lastDir = $pathDirs[(scalar @pathDirs)-1];

	#printf("Lastdir: $lastDir");

	$type = `file -b \"$_[0]\"`;

	#printf "Filetype is $type";
	

	if (index($type, "M4A") != -1)
	{
		$q10Arg = '-q8.8';
	} else
	{
	  	$q10Arg = '-t';
	}
	    #printf("isFLAC :D");

	    $pathQ00 =~ s/\....$/\.ogg/;

	    ($volume,$newPath,$newFile) = File::Spec->splitpath( $pathQ00 );


	    @encoderArgs = ("-q0","-o", $pathQ00, $_[0]);

	   if (-s $pathQ00 <= 1)
	   {

	        system ($encoderMyDir2Ogg, @encoderArgs);
	   } else 
	   {
		printf("File exists and has been skipped: $pathQ00\n");
	   }
	    ####

	    $pathQ05 =~ s/\....$/\.ogg/;

	    ($volume,$newPath,$newFile) = File::Spec->splitpath( $pathQ05 );

	    @encoderArgs = ("-q5","-o", $pathQ05, $_[0]);
	    
	   if (-s $pathQ05 <= 1)
	   {

	        system ($encoderMyDir2Ogg, @encoderArgs);
	   } else 
	   {
		printf("File exists and has been skipped: $pathQ05\n");
	   }

	    

	    ####

	    $pathQ10 =~ s/\....$/\.ogg/;

	    ($volume,$newPath,$newFile) = File::Spec->splitpath( $pathQ10 );


	    @encoderArgs = ($q10Arg,"-o", $pathQ10, $_[0]);
	    
	   if (-s $pathQ10 <= 1)
	   {
	    	
	        system ($encoderMyDir2Ogg, @encoderArgs);
	   } else 
	   {
		printf("File exists and has been skipped: $pathQ10\n");
	   }

	    

    } else
    {
	printf "Error: quack cannot determine music root location (aka \"_originalQ\" )\n";
    }
}

sub MakeQualityDirs # $_[0]: the path to re-create
{
    $wholeFilePath = File::Spec->rel2abs($_[0]);

    ($volume,$newPath,$newFile) = File::Spec->splitpath( $wholeFilePath );

    $pathQ00 = $newPath;

    $pathQ00 =~ s/_originalQ/_q00/;

    $pathQ05 = $newPath;

    $pathQ05 =~ s/_originalQ/_q05/;

    $pathQ10 = $newPath;

    $pathQ10 =~ s/_originalQ/_q10/;

    print "Make path: $pathQ00";
    make_path($pathQ00);
    make_path($pathQ05);
    make_path($pathQ10);
}

sub DistributePic # $_[0] : image to be redistributed
{
    $wholeFilePath = File::Spec->rel2abs($_[0]);
    
    $pathQ00 = $wholeFilePath;

    $pathQ00 =~ s/_originalQ/_q00/;

    $pathQ05 = $wholeFilePath;

    $pathQ05 =~ s/_originalQ/_q05/;

    $pathQ10 = $wholeFilePath;

    $pathQ10 =~ s/_originalQ/_q10/;

    if (-s $pathQ00 <= 1024)
    {
        copy($wholeFilePath, $pathQ00);
    }
    if (-s $pathQ05 <= 1024)
    {
        copy($wholeFilePath, $pathQ05);
    }
    if (-s $pathQ10 <= 1024)
    {
        copy($wholeFilePath, $pathQ10);
    }
   
}
